import z from 'zod';

// Node type enum validation based on Prisma schema
export const nodeTypeSchema = z.enum(['COLLECTOR', 'PROCESSOR', 'FORWARDER']);

// Node validation schema for creation
export const nodeSchema = z.object({
  id: z.string().min(1, 'Node ID is required'),
  name: z.string().min(1, 'Node name is required'),
  type: nodeTypeSchema,
  functionName: z.string().min(1, 'Function name is required'),
  config: z.record(z.any()).optional(), // JSON object for configuration
  // streamId is optional during creation as it will be set when creating the stream
  streamId: z.string().optional(),
});

// Edge validation schema for creation
export const edgeSchema = z.object({
  // id is auto-generated by Prisma (@default(cuid()))
  id: z.string().optional(),
  sourceId: z.string().min(1, 'Source node ID is required'),
  targetId: z.string().min(1, 'Target node ID is required'),
  // streamId is optional during creation as it will be set when creating the stream
  streamId: z.string().optional(),
});

// Create Stream validation schema
export const createStreamSchema = z
  .object({
    body: z.object({
      // id is auto-generated by Prisma (@default(cuid()))
      // createdAt and updatedAt are auto-managed by Prisma
      name: z
        .string()
        .min(1, 'Stream name is required')
        .max(255, 'Stream name must be less than 255 characters')
        .trim(),

      // Optional nodes array for stream creation
      nodes: z.array(nodeSchema).optional().default([]),

      // Optional edges array for stream creation
      edges: z.array(edgeSchema).optional().default([]),
    }),

    // Additional validation to ensure edge references exist in nodes
  })
  .refine(
    (data) => {
      const { nodes = [], edges = [] } = data.body;

      // Get all node IDs
      const nodeIds = new Set(nodes.map((node) => node.id));

      // Check if all edge source and target IDs exist in nodes
      for (const edge of edges) {
        if (!nodeIds.has(edge.sourceId)) {
          return false;
        }
        if (!nodeIds.has(edge.targetId)) {
          return false;
        }
      }

      return true;
    },
    {
      message: 'All edge source and target IDs must reference existing nodes',
      path: ['body', 'edges'],
    }
  );

// Type exports for TypeScript usage
export type NodeType = z.infer<typeof nodeTypeSchema>;
export type CreateStreamRequest = z.infer<typeof createStreamSchema>;
